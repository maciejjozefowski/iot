// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: query.sql

package devices

import (
	"context"
)

const createDevice = `-- name: CreateDevice :one
insert into devices (name, brand, model, mac) values ($1, $2, $3, $4) returning id, name, brand, model, mac
`

type CreateDeviceParams struct {
	Name  string
	Brand string
	Model string
	Mac   string
}

func (q *Queries) CreateDevice(ctx context.Context, arg CreateDeviceParams) (Device, error) {
	row := q.db.QueryRow(ctx, createDevice,
		arg.Name,
		arg.Brand,
		arg.Model,
		arg.Mac,
	)
	var i Device
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Brand,
		&i.Model,
		&i.Mac,
	)
	return i, err
}

const deleteDevice = `-- name: DeleteDevice :one
delete from devices where id = $1 returning id, name, brand, model, mac
`

func (q *Queries) DeleteDevice(ctx context.Context, id int32) (Device, error) {
	row := q.db.QueryRow(ctx, deleteDevice, id)
	var i Device
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Brand,
		&i.Model,
		&i.Mac,
	)
	return i, err
}

const getDeviceByID = `-- name: GetDeviceByID :one
select id, name, brand, model, mac from devices where id = $1 limit 1
`

func (q *Queries) GetDeviceByID(ctx context.Context, id int32) (Device, error) {
	row := q.db.QueryRow(ctx, getDeviceByID, id)
	var i Device
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Brand,
		&i.Model,
		&i.Mac,
	)
	return i, err
}

const getDeviceByMac = `-- name: GetDeviceByMac :one
select id, name, brand, model, mac from devices where id = $1 limit 1
`

func (q *Queries) GetDeviceByMac(ctx context.Context, id int32) (Device, error) {
	row := q.db.QueryRow(ctx, getDeviceByMac, id)
	var i Device
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Brand,
		&i.Model,
		&i.Mac,
	)
	return i, err
}

const getDeviceByParams = `-- name: GetDeviceByParams :many
select id, name, brand, model, mac from devices where name = $1 or brand = $2 or model = $3 or mac = $4
`

type GetDeviceByParamsParams struct {
	Name  string
	Brand string
	Model string
	Mac   string
}

func (q *Queries) GetDeviceByParams(ctx context.Context, arg GetDeviceByParamsParams) ([]Device, error) {
	rows, err := q.db.Query(ctx, getDeviceByParams,
		arg.Name,
		arg.Brand,
		arg.Model,
		arg.Mac,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Device
	for rows.Next() {
		var i Device
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Brand,
			&i.Model,
			&i.Mac,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDeviceListByBrand = `-- name: GetDeviceListByBrand :many
select id, name, brand, model, mac from devices where brand = $1
`

func (q *Queries) GetDeviceListByBrand(ctx context.Context, brand string) ([]Device, error) {
	rows, err := q.db.Query(ctx, getDeviceListByBrand, brand)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Device
	for rows.Next() {
		var i Device
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Brand,
			&i.Model,
			&i.Mac,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDeviceListByModel = `-- name: GetDeviceListByModel :many
select id, name, brand, model, mac from devices where model = $1
`

func (q *Queries) GetDeviceListByModel(ctx context.Context, model string) ([]Device, error) {
	rows, err := q.db.Query(ctx, getDeviceListByModel, model)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Device
	for rows.Next() {
		var i Device
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Brand,
			&i.Model,
			&i.Mac,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDeviceListByNames = `-- name: GetDeviceListByNames :many
select id, name, brand, model, mac from devices where name = $1
`

func (q *Queries) GetDeviceListByNames(ctx context.Context, name string) ([]Device, error) {
	rows, err := q.db.Query(ctx, getDeviceListByNames, name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Device
	for rows.Next() {
		var i Device
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Brand,
			&i.Model,
			&i.Mac,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDevicesListPaged = `-- name: GetDevicesListPaged :many
select id, name, brand, model, mac from devices order by id limit $1 offset $2
`

type GetDevicesListPagedParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) GetDevicesListPaged(ctx context.Context, arg GetDevicesListPagedParams) ([]Device, error) {
	rows, err := q.db.Query(ctx, getDevicesListPaged, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Device
	for rows.Next() {
		var i Device
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Brand,
			&i.Model,
			&i.Mac,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateDevice = `-- name: UpdateDevice :one
update devices set name = $1, brand = $2, model = $3, mac = $4 where id = $5 returning id, name, brand, model, mac
`

type UpdateDeviceParams struct {
	Name  string
	Brand string
	Model string
	Mac   string
	ID    int32
}

func (q *Queries) UpdateDevice(ctx context.Context, arg UpdateDeviceParams) (Device, error) {
	row := q.db.QueryRow(ctx, updateDevice,
		arg.Name,
		arg.Brand,
		arg.Model,
		arg.Mac,
		arg.ID,
	)
	var i Device
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Brand,
		&i.Model,
		&i.Mac,
	)
	return i, err
}
